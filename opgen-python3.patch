--- kmodsrc/x86/libudis86/opgen.py	(original)
+++ kmodsrc/x86/libudis86/opgen.py	(refactored)
@@ -204,7 +204,7 @@
 #
 # collect the operand/size constants
 # 
-for o in operand_dict.keys():
+for o in list(operand_dict.keys()):
     if not (operand_dict[o][0] in opr_constants):
         opr_constants.append(operand_dict[o][0])
     if not (operand_dict[o][1] in siz_constants):
@@ -245,7 +245,7 @@
 # list of tables
 #
 def mktab(name, size):
-    if not (name in tables.keys()):
+    if not (name in list(tables.keys())):
         tables[name] = {}
         table_sizes[name] = size
 
@@ -260,15 +260,15 @@
         continue
 
      # we need the mnemonic attribute
-    if not ('mnemonic' in node.attributes.keys()):
-        print "error: no mnemonic given in <instruction>."
+    if not ('mnemonic' in list(node.attributes.keys())):
+        print("error: no mnemonic given in <instruction>.")
         sys.exit(-1) 
 
     # check if this instruction was already defined.
     # else add it to the global list of mnemonics
     mnemonic = node.attributes['mnemonic'].value
     if mnemonic in mnm_list:
-        print "error: multiple declarations of mnemonic='%s'" % mnemonic;
+        print("error: multiple declarations of mnemonic='%s'" % mnemonic);
         sys.exit(-1)
     else:
         mnm_list.append(mnemonic)
@@ -300,21 +300,21 @@
         pfx_c  = []
 
         # get cast attribute, if given
-        if 'cast' in n.attributes.keys():
+        if 'cast' in list(n.attributes.keys()):
             pfx_c.append( "P_c" + n.attributes['cast'].value )
 
	# get implicit addressing attribute, if given
-	if 'imp_addr' in n.attributes.keys():
+        if 'imp_addr' in list(n.attributes.keys()):
             if int( n.attributes['imp_addr'].value ):
                 pfx_c.append( "P_ImpAddr" )
 
         # get mode attribute, if given
-        if 'mode' in n.attributes.keys():
+        if 'mode' in list(n.attributes.keys()):
             v = (n.attributes['mode'].value).strip()
             modef = v.split();
             for m in modef:
                 if not (m in pfx_dict):
-                    print "warning: unrecognized mode attribute '%s'" % m
+                    print("warning: unrecognized mode attribute '%s'" % m)
                 else:
                      pfx_c.append(pfx_dict[m])
 
@@ -339,7 +339,7 @@
             opc = parts[1].split()
             opr = parts[2].split()
         else:
-            print "error: invalid opcode definition of %s\n" % mnemonic
+            print("error: invalid opcode definition of %s\n" % mnemonic)
             sys.exit(-1)
         # Convert opcodes to upper case
         for i in range(len(opc)):
@@ -359,8 +359,8 @@
         # Convert prefix
         #
         for p in pfx:
-            if not ( p in pfx_dict.keys() ):
-                print "error: invalid prefix specification: %s \n" % pfx
+            if not ( p in list(pfx_dict.keys()) ):
+                print("error: invalid prefix specification: %s \n" % pfx)
             pfx_c.append( pfx_dict[p] )
         if len(pfx) == 0:
             pfx_c.append( "P_none" )
@@ -371,8 +371,8 @@
         #
         opr_c = [ "O_NONE", "O_NONE", "O_NONE" ]
         for i in range(len(opr)): 
-            if not (opr[i] in operand_dict.keys()):
-                print "error: invalid operand declaration: %s\n" % opr[i]
+            if not (opr[i] in list(operand_dict.keys())):
+                print("error: invalid operand declaration: %s\n" % opr[i])
             opr_c[i] = "O_" + opr[i]
         opr = "%-8s %-8s %s" % (opr_c[0] + ",", opr_c[1] + ",", opr_c[2])
 
@@ -539,7 +539,7 @@
 #
 # Generate enumeration of the tables
 #
-table_names = tables.keys()
+table_names = list(tables.keys())
 table_names.sort();
 
 f.write( "\nenum ud_itab_index {\n" )
@@ -561,7 +561,7 @@
 # Generate operand definitions
 #
 f.write("\n/* itab entry operand definitions */\n\n");
-operands = operand_dict.keys()
+operands = list(operand_dict.keys())
 operands.sort()
 for o in operands:
     f.write("#define O_%-7s { %-12s %-8s }\n" %

